import { ImportsFlatMap } from '../types'

export function generateDeclration(
  imports: ImportsFlatMap,
  types: ImportsFlatMap,
  resolvedImports: ImportsFlatMap = {},
  resolvedTypes: ImportsFlatMap = {},
) {
  const declarations: Array<string> = []
  const importTypes = new Map<string, Array<string>>()

  if (types) {
    [
      ...Object.entries(types),
      ...Object.entries(resolvedTypes),
    ]
      .sort((a, b) => a[0].localeCompare(b[0]))
      .forEach(([name, info]) => {
        if (!importTypes.has(info.module))
          importTypes.set(info.module, [])
        importTypes.get(info.module)!.push(`  ${info.from || name} as __${info.from || name}`)
        const parameters = info?.parameters ? (typeof info.parameters === 'string' ? info.parameters : 'T') : false
        declarations.push(
          parameters
            ? `  type ${info.from || name}<${parameters}> = __${info.from || name}<${parameters}>`
            : `  type ${info.from || name} = __${info.from || name}`,
        )
      })
  }

  [
    ...Object.entries(imports),
    ...Object.entries(resolvedImports),
  ]
    .sort((a, b) => a[0].localeCompare(b[0]))
    .forEach(([name, info]) => {
      declarations.push(`  const ${name}: typeof import('${info.module}')['${info.from || name}']`)
    })

  return `
// Generated by 'unplugin-auto-import'
// We suggest you to commit this file into source control
${Array.from(importTypes.keys()).map((module) => {
    return `import type {
${importTypes.get(module)!.join(',\n')}  
} from '${module}'
`
  }).join('\n')
}
declare global {
${declarations.join('\n')}
}
export {}
`
}
